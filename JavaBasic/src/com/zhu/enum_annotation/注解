1.注解的理解
    1) 注解(Annotation)也被称为元数据(Metadata)，用于修饰解释 包、类、方法、属性、构造器、局部变量等数据信息。
    2) 和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息。
    3) 在 JavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在 JavaEE 中注解占据了更重要的角
       色，例如用来配置应用程序的任何切面，代替 java EE 旧版中所遗留的繁冗代码和 XML 配置等。
2.基本的 Annotation 介绍
    使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元
    素
    三个基本的 Annotation:
        1) @Override: 限定某个方法，是重写父类方法, 该注解只能用于方法
        2) @Deprecated: 用于表示某个程序元素(类, 方法等)已过时
        3) @SuppressWarnings: 抑制编译器警告

        @Override使用说明
            1.@Override表示指定重写父类的方法（从编译层面验证），如果父类没有方法
              ，则会报错
            2.如果不写@Override注解，而父类仍有该方法，仍然构成重写
            3.@Override只能修饰方法，不能修饰其他类，包，属性等等
            4.查看@Override注解原码为@Target(ElementType.METHOD),说明只能修饰
              方法
            5.@Target为修饰注解的注解，称为元注解

        @Deprecated的说明
            1.用于表示某个程序元素（类，方法等）已过时
            2.可以修饰方法，类，字段，包，参数等等
            3.@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})
            4.@Deprecated的作用可以做到新旧版本的兼容和过渡

        @SuppressWarnings的说明
            1.unchecked是忽略没有检查的警告
            2.rawtypes是忽略没有指定泛型的警告（传参时没有指定泛型的警告错误）
            3.unused是忽略没有使用某个变量的警告错误
            4.@SuppressWarnings可以修饰的程序元素为，查看@Target
            5.生成@SuppressWarnings时，直接点击左侧的黄色提示，就可以选择（注意可以指定生成的位置）
3.元注解的基本介绍
    JDK 的元 Annotation 用于修饰其他 Annotation
    元注解： 本身作用不大，讲这个原因希望同学们，看源码时，可以知道他是干什么. 11.15.2 元注解的种类 (使用不多，了解, 不用深入研究)
        1) Retention //指定注解的作用范围，三种 SOURCE,CLASS,RUNTIME
        2) Target // 指定注解可以在哪些地方使用
        3) Documented //指定该注解是否会在 javadoc 体现
        4) Inherited //子类会继承父类注解
1.异常处理基本介绍
    异常处理就是当异常发生时，对异常处理的方式。
2.异常处理的方式
    1）try-catch-finally
       程序员代码中捕获发生的异常，自行处理
    2）throws
       将发生异常抛出，交给调用者（方法）来处理，最顶级的处理者
       就是JVM

3.try-catch异常处理
    1.说明：
        1)Java提供try和catch块来处理异常。try块用于包含可能出错的
          代码。catch块用于处理try块中发生的异常。可以根据需要在程序
          中有多个try-catch块。
        2）基本语法
           try{
                //可疑代码
                //将异常生成对应的异常对象，传递给catch块
           }catch(异常){
           //对异常处理
           }//如果没有finally，语法是可以通过
    2.注意事项
       1）如果异常发生了，则异常发生后面的代码不会执行，直接进入到catch块
       2）如果异常没有发生，则顺序执行try的代码块，不会进入到catch
       3）如果希望不管是否发生异常，都执行某段代码（比如关闭连接，释放资源等）
          则使用finally{}
       4）可以有多个catch语句，捕获不同的异常(进行不同的业务处理),要求父类异常
          在后，子类异常在前，比如（Exception在后，NullPointException在前
          ，如果发生异常只会匹配一个catch
       5）可以进行try-finally配合使用，这种用法相当于没有捕获异常，因此程序
          会直接崩掉/退出。应用场景，就是执行一段代码，不管是否发生异常，都必
          须执行某个业务逻辑
    3.try-catch-finally执行顺序小结
        1）如果没有出现异常。则执行try块中所有语句，不执行catch块中的语句，
           如果有finally，最后 还需要执行finally里面的语句
        2）如果出现异常，则try块中异常发生后，try块剩下的语句不在执行。将
           执行catch块中的语句u，如果有finally，最后还需要执行finally里面
           的语句
4.throws异常处理
    1.基本介绍
        1）如果一个方法（中的语句执行时）可能生成某种异常，但是并不能确定如何处理这种异常，则此方法
           应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用
           着负责处理
        2）在方法的声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型
           可以是方法中产生否异常类型，也可以是他的父类
    2.注意事项和使用细节
        1）对于编译异常，程序中必须处理，比如try-catch或者throws
        2）对于运行时异常，程序中如果没有处理，默认就是throws的方式处理
        3）子类重写父类的方法时，对抛出异常的规定：子类重写的方法，所抛出的异常类型要
           么和父类抛出的异常一致，要么为父类抛出异常的类型的子类型
        4）在throws过程中，如果有方法try-catch，就相当于处理异常，就可以不必throws
